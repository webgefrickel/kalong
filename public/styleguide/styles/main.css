/*! normalize.css v8.0.0 | MIT License | github.com/necolas/normalize.css */
/* Document
   ========================================================================== */
/**
 * 1. Correct the line height in all browsers.
 * 2. Prevent adjustments of font size after orientation changes in iOS.
 */
html {
  line-height: 1.15;
  /* 1 */
  -webkit-text-size-adjust: 100%;
  /* 2 */ }

/* Sections
   ========================================================================== */
/**
 * Remove the margin in all browsers.
 */
body {
  margin: 0; }

/**
 * Correct the font size and margin on `h1` elements within `section` and
 * `article` contexts in Chrome, Firefox, and Safari.
 */
h1 {
  font-size: 2em;
  margin: 0.67em 0; }

/* Grouping content
   ========================================================================== */
/**
 * 1. Add the correct box sizing in Firefox.
 * 2. Show the overflow in Edge and IE.
 */
hr {
  box-sizing: content-box;
  /* 1 */
  height: 0;
  /* 1 */
  overflow: visible;
  /* 2 */ }

/**
 * 1. Correct the inheritance and scaling of font size in all browsers.
 * 2. Correct the odd `em` font sizing in all browsers.
 */
pre {
  font-family: monospace, monospace;
  /* 1 */
  font-size: 1em;
  /* 2 */ }

/* Text-level semantics
   ========================================================================== */
/**
 * Remove the gray background on active links in IE 10.
 */
a {
  background-color: transparent; }

/**
 * 1. Remove the bottom border in Chrome 57-
 * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.
 */
abbr[title] {
  border-bottom: none;
  /* 1 */
  text-decoration: underline;
  /* 2 */
  -webkit-text-decoration: underline dotted;
          text-decoration: underline dotted;
  /* 2 */ }

/**
 * Add the correct font weight in Chrome, Edge, and Safari.
 */
b,
strong {
  font-weight: bolder; }

/**
 * 1. Correct the inheritance and scaling of font size in all browsers.
 * 2. Correct the odd `em` font sizing in all browsers.
 */
code,
kbd,
samp {
  font-family: monospace, monospace;
  /* 1 */
  font-size: 1em;
  /* 2 */ }

/**
 * Add the correct font size in all browsers.
 */
small {
  font-size: 80%; }

/**
 * Prevent `sub` and `sup` elements from affecting the line height in
 * all browsers.
 */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline; }

sub {
  bottom: -0.25em; }

sup {
  top: -0.5em; }

/* Embedded content
   ========================================================================== */
/**
 * Remove the border on images inside links in IE 10.
 */
img {
  border-style: none; }

/* Forms
   ========================================================================== */
/**
 * 1. Change the font styles in all browsers.
 * 2. Remove the margin in Firefox and Safari.
 */
button,
input,
optgroup,
select,
textarea {
  font-family: inherit;
  /* 1 */
  font-size: 100%;
  /* 1 */
  line-height: 1.15;
  /* 1 */
  margin: 0;
  /* 2 */ }

/**
 * Show the overflow in IE.
 * 1. Show the overflow in Edge.
 */
button,
input {
  /* 1 */
  overflow: visible; }

/**
 * Remove the inheritance of text transform in Edge, Firefox, and IE.
 * 1. Remove the inheritance of text transform in Firefox.
 */
button,
select {
  /* 1 */
  text-transform: none; }

/**
 * Correct the inability to style clickable types in iOS and Safari.
 */
button,
[type="button"],
[type="reset"],
[type="submit"] {
  -webkit-appearance: button; }

/**
 * Remove the inner border and padding in Firefox.
 */
button::-moz-focus-inner,
[type="button"]::-moz-focus-inner,
[type="reset"]::-moz-focus-inner,
[type="submit"]::-moz-focus-inner {
  border-style: none;
  padding: 0; }

/**
 * Restore the focus styles unset by the previous rule.
 */
button:-moz-focusring,
[type="button"]:-moz-focusring,
[type="reset"]:-moz-focusring,
[type="submit"]:-moz-focusring {
  outline: 1px dotted ButtonText; }

/**
 * Correct the padding in Firefox.
 */
fieldset {
  padding: 0.35em 0.75em 0.625em; }

/**
 * 1. Correct the text wrapping in Edge and IE.
 * 2. Correct the color inheritance from `fieldset` elements in IE.
 * 3. Remove the padding so developers are not caught out when they zero out
 *    `fieldset` elements in all browsers.
 */
legend {
  box-sizing: border-box;
  /* 1 */
  color: inherit;
  /* 2 */
  display: table;
  /* 1 */
  max-width: 100%;
  /* 1 */
  padding: 0;
  /* 3 */
  white-space: normal;
  /* 1 */ }

/**
 * Add the correct vertical alignment in Chrome, Firefox, and Opera.
 */
progress {
  vertical-align: baseline; }

/**
 * Remove the default vertical scrollbar in IE 10+.
 */
textarea {
  overflow: auto; }

/**
 * 1. Add the correct box sizing in IE 10.
 * 2. Remove the padding in IE 10.
 */
[type="checkbox"],
[type="radio"] {
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Correct the cursor style of increment and decrement buttons in Chrome.
 */
[type="number"]::-webkit-inner-spin-button,
[type="number"]::-webkit-outer-spin-button {
  height: auto; }

/**
 * 1. Correct the odd appearance in Chrome and Safari.
 * 2. Correct the outline style in Safari.
 */
[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */
  outline-offset: -2px;
  /* 2 */ }

/**
 * Remove the inner padding in Chrome and Safari on macOS.
 */
[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none; }

/**
 * 1. Correct the inability to style clickable types in iOS and Safari.
 * 2. Change font properties to `inherit` in Safari.
 */
::-webkit-file-upload-button {
  -webkit-appearance: button;
  /* 1 */
  font: inherit;
  /* 2 */ }

/* Interactive
   ========================================================================== */
/*
 * Add the correct display in Edge, IE 10+, and Firefox.
 */
details {
  display: block; }

/*
 * Add the correct display in all browsers.
 */
summary {
  display: list-item; }

/* Misc
   ========================================================================== */
/**
 * Add the correct display in IE 10+.
 */
template {
  display: none; }

/**
 * Add the correct display in IE 10.
 */
[hidden] {
  display: none; }

@font-face {
  src: url("../fonts/roboto-regular.woff2") format("woff2"), url("../fonts/roboto-regular.woff") format("woff");
  font-family: Roboto;
  font-weight: 400;
  font-style: normal;
  font-display: swap; }

[type='text'],
[type='tel'],
[type='email'],
[type='search'],
[type='number'],
[type='password'],
select,
textarea {
  padding: 0.375rem;
  padding-bottom: 0.375rem;
  width: 100%;
  border: 1px solid currentColor;
  border-radius: 0;
  -webkit-appearance: none;
     -moz-appearance: none;
          appearance: none; }
  [type='text']:hover, [type='text']:active, [type='text']:focus,
  [type='tel']:hover,
  [type='tel']:active,
  [type='tel']:focus,
  [type='email']:hover,
  [type='email']:active,
  [type='email']:focus,
  [type='search']:hover,
  [type='search']:active,
  [type='search']:focus,
  [type='number']:hover,
  [type='number']:active,
  [type='number']:focus,
  [type='password']:hover,
  [type='password']:active,
  [type='password']:focus,
  select:hover,
  select:active,
  select:focus,
  textarea:hover,
  textarea:active,
  textarea:focus {
    border-color: #f78474; }

textarea {
  resize: vertical; }

fieldset {
  margin: 0;
  margin-bottom: 1.5rem;
  padding: 0;
  border: 0; }

label {
  display: block;
  cursor: pointer; }

[unselectable] {
  -webkit-user-select: none;
     -moz-user-select: none;
      -ms-user-select: none;
          user-select: none; }

h1 {
  z-index: 1;
  font-size: 3rem;
  margin: 0;
  margin-bottom: 1.5rem; }

h2 {
  font-size: 2rem;
  margin: 0;
  margin-bottom: 1.5rem; }

h3 {
  font-size: 1.5rem;
  margin: 0;
  margin-bottom: 1.5rem; }

h4 {
  font-size: 1.25rem;
  margin: 0;
  margin-bottom: 1.5rem; }

h5 {
  font-size: 1rem;
  margin: 0;
  margin-bottom: 1.5rem; }

h6 {
  font-size: 0.875rem;
  margin: 0;
  margin-bottom: 1.5rem; }

a {
  text-decoration: none; }
  a:hover, a:active, a:focus {
    text-decoration: underline; }

ul,
dl,
ol {
  margin: 0;
  margin-bottom: 1.5rem;
  padding: 0;
  padding-left: 1.5rem; }

nav ul,
nav ol,
fieldset ul,
fieldset ol {
  padding: 0;
  list-style: none; }

audio,
canvas,
iframe,
img,
svg,
video {
  vertical-align: middle; }

audio,
iframe,
img,
video {
  max-width: 100%;
  height: auto; }

figure {
  margin: 0;
  margin-bottom: 1.5rem; }

:root {
  color: #000;
  background-color: #fff;
  box-sizing: border-box;
  font-size: 16px;
  -webkit-font-kerning: normal;
          font-kerning: normal;
  font-variant-ligatures: common-ligatures contextual;
  font-feature-settings: 'kern', 'liga', 'clig', 'calt';
  line-height: 1.5;
  -webkit-text-size-adjust: 100%;
          text-size-adjust: 100%; }

*, *::before, *::after {
  box-sizing: inherit; }

body {
  font-family: sans-serif;
  font-weight: 400;
  font-style: normal;
  background-color: #fff; }
  .fonts-loaded body {
    font-family: Roboto, sans-serif; }
  @media print {
    body * {
      display: none; }
    body::after {
      content: 'Please, do not waste paper by printing webpages.'; } }

::-moz-selection {
  background-color: #f78474;
  color: #fff;
  text-shadow: none; }

::selection {
  background-color: #f78474;
  color: #fff;
  text-shadow: none; }

table {
  margin: 0;
  margin-bottom: 1.5rem;
  width: 100%;
  border-collapse: collapse; }

td,
th {
  padding: 0;
  vertical-align: top; }

th {
  text-align: left; }

hr {
  margin-right: auto;
  margin-left: auto;
  margin-bottom: 1.5rem;
  margin-top: 0;
  display: block;
  border: 0;
  border-bottom: 1px solid currentColor; }

blockquote,
pre,
p {
  margin: 0;
  margin-bottom: 1.5rem; }

.button {
  padding: 0.75rem;
  color: #000;
  display: inline-block;
  border: 1px solid currentColor;
  text-decoration: none;
  cursor: pointer; }
  .button:hover, .button:active, .button:focus {
    color: #f78474;
    text-decoration: none; }

.example {
  padding: 1.5rem;
  border: 1px solid currentColor;
  box-shadow: 0 0 1.5rem 0 currentColor; }

.example--default {
  font-size: 100%; }

.example--large {
  padding: 3rem;
  font-size: 200%; }

.icon {
  position: relative;
  top: -0.0625em;
  display: inline-block;
  width: 1em;
  height: 1em;
  fill: currentColor; }

.icon--logo {
  fill: #f78474;
  width: 3rem;
  height: 3rem; }

.grid {
  margin-left: -1.5rem;
  padding: 0;
  display: flex;
  flex-direction: column;
  flex-wrap: wrap;
  justify-content: space-between;
  list-style: none; }
  @media (min-width: 720px) {
    .grid {
      flex-direction: row; } }

.grid__column {
  padding-left: 1.5rem;
  flex: 1; }

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
